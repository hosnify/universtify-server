datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Major {
  id            Int       @id @default(autoincrement())
  code          String    @unique
  name          String?
  majorStudents Student[] @relation("MajorStudents")
  minorStudents Student[] @relation("MinorStudents")
  majorCourses  Course[]  @relation("MajorCourses")
  minorCourses  Course[]  @relation("MinorCourses")

}

model Student {
  id              Int               @id @default(autoincrement())
  uniCode         String            @unique @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  fname           String            @db.VarChar(255)
  lname           String            @db.VarChar(255)
  gender          Gender?
  password        String?           @default(uuid())
  email           String            @unique
  level           Int?
  semester        Semester?
  creditDone      Int?
  creditHave      Int?
  supervisorId    Int?
  supervisor      Supervisor?       @relation(fields: [supervisorId], references: [id])
  coursesFinished FinishedCourses[]
  GPA             Float?
  lastTermGPA     Float?
  enrollments     Enrollment[]
  notifications   Notifications[]
  majorId         Int?
  major           Major?            @relation("MajorStudents", fields: [majorId], references: [id])
  minorId         Int?
  minor           Major?            @relation("MinorStudents", fields: [majorId], references: [id])

}

model Supervisor {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  fname         String          @db.VarChar(255)
  lname         String          @db.VarChar(255)
  phone         String?
  gender        Gender?
  password      String?         @default(uuid())
  email         String          @unique
  students      Student[]
  enrollments   Enrollment[]
  notifications Notifications[]

}

model Course {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String
  level            Int?
  discreption      String?
  credit           Int?
  available        Boolean           @default(true)
  courseCode       String?
  prerequisites    Course[]          @relation("CoursePrerequisites", references: [id])
  prerequisitedBy  Course[]          @relation("CoursePrerequisites", references: [id])
  studentsFinished FinishedCourses[]
  enrollments      Enrollment[]
  majorId          Int?
  major            Major?            @relation("MajorCourses", fields: [majorId], references: [id])
  minorId          Int?
  minor            Major?            @relation("MinorCourses", fields: [minorId], references: [id])
}

model Enrollment {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  supervisor   Supervisor? @relation(fields: [supervisorId], references: [id])
  supervisorId Int?
  student      Student?    @relation(fields: [studentID], references: [id])
  studentID    Int?
  course       Course?     @relation(fields: [courseID], references: [id])
  courseID     Int?
  isAproved    Boolean     @default(false)
  status       String      @default("in review")
}

model FinishedCourses {
  id             Int       @id @default(autoincrement())
  course         Course    @relation(fields: [courseId], references: [id])
  courseId       Int
  student        Student   @relation(fields: [studentID], references: [id])
  studentID      Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  grade          Float?
  semester       Semester?
  instructorName String?


}

model Notifications {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  supervisor   Supervisor? @relation(fields: [supervisorId], references: [id])
  supervisorId Int?
  student      Student?    @relation(fields: [studentID], references: [id])
  studentID    Int?
  status       Int?        @default(0)
  data         Json

}

enum Gender {
  MALE
  FEMALE
}

enum Semester {
  FALL
  SPRING
  SUMMER
}
